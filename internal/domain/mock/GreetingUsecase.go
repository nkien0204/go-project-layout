// Code generated by mockery v2.35.4. DO NOT EDIT.

package mock

import (
	greeting "github.com/nkien0204/lets-go/internal/domain/entity/greeting"
	mock "github.com/stretchr/testify/mock"
)

// GreetingUsecase is an autogenerated mock type for the GreetingUsecase type
type GreetingUsecase struct {
	mock.Mock
}

// Greeting provides a mock function with given fields:
func (_m *GreetingUsecase) Greeting() (greeting.GreetingResponseEntity, error) {
	ret := _m.Called()

	var r0 greeting.GreetingResponseEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() (greeting.GreetingResponseEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() greeting.GreetingResponseEntity); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(greeting.GreetingResponseEntity)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGreetingUsecase creates a new instance of GreetingUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGreetingUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GreetingUsecase {
	mock := &GreetingUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
